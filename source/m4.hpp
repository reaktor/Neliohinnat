// Code generated by Stan version 2.6

#include <stan/model/model_header.hpp>

namespace m4_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class m4_model : public prob_grad {
private:
    int N;
    int M;
    int M1;
    int M2;
    vector_d lprice;
    vector<int> count;
    vector<double> yr;
    vector<double> z;
    vector<int> pnro;
    vector<int> l1;
    vector<int> l2;
    matrix_d X;
    vector_d zero_beta;
public:
    m4_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "m4_model_namespace::m4_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M1", "int", context__.to_vec());
        M1 = int(0);
        vals_i__ = context__.vals_i("M1");
        pos__ = 0;
        M1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M2", "int", context__.to_vec());
        M2 = int(0);
        vals_i__ = context__.vals_i("M2");
        pos__ = 0;
        M2 = vals_i__[pos__++];
        validate_non_negative_index("lprice", "N", N);
        lprice = vector_d(N);
        context__.validate_dims("data initialization", "lprice", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("lprice");
        pos__ = 0;
        size_t lprice_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < lprice_i_vec_lim__; ++i_vec__) {
            lprice[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "count", "int", context__.to_vec(N));
        validate_non_negative_index("count", "N", N);
        count = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("count");
        pos__ = 0;
        size_t count_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < count_limit_0__; ++i_0__) {
            count[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "yr", "double", context__.to_vec(N));
        validate_non_negative_index("yr", "N", N);
        yr = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("yr");
        pos__ = 0;
        size_t yr_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < yr_limit_0__; ++i_0__) {
            yr[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "z", "double", context__.to_vec(N));
        validate_non_negative_index("z", "N", N);
        z = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("z");
        pos__ = 0;
        size_t z_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < z_limit_0__; ++i_0__) {
            z[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "pnro", "int", context__.to_vec(N));
        validate_non_negative_index("pnro", "N", N);
        pnro = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("pnro");
        pos__ = 0;
        size_t pnro_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < pnro_limit_0__; ++i_0__) {
            pnro[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l1", "int", context__.to_vec(N));
        validate_non_negative_index("l1", "N", N);
        l1 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("l1");
        pos__ = 0;
        size_t l1_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < l1_limit_0__; ++i_0__) {
            l1[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "l2", "int", context__.to_vec(N));
        validate_non_negative_index("l2", "N", N);
        l2 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("l2");
        pos__ = 0;
        size_t l2_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < l2_limit_0__; ++i_0__) {
            l2[i_0__] = vals_i__[pos__++];
        }

        // validate data
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"count[k0__]",count[k0__],1);
        }
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "6", 6);
        X = matrix_d(N,6);
        validate_non_negative_index("zero_beta", "6", 6);
        zero_beta = vector_d(6);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(X,DUMMY_VAR__);
        stan::math::fill(zero_beta,DUMMY_VAR__);

        try {
            current_statement_begin__ = 13;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 13;
                stan::math::assign(get_base1_lhs(X,i,1,"X",1), 1);
                current_statement_begin__ = 13;
                stan::math::assign(get_base1_lhs(X,i,2,"X",1), get_base1(yr,i,"yr",1));
                current_statement_begin__ = 13;
                stan::math::assign(get_base1_lhs(X,i,3,"X",1), (get_base1(yr,i,"yr",1) * get_base1(yr,i,"yr",1)));
                current_statement_begin__ = 14;
                stan::math::assign(get_base1_lhs(X,i,4,"X",1), get_base1(z,i,"z",1));
                current_statement_begin__ = 14;
                stan::math::assign(get_base1_lhs(X,i,5,"X",1), (get_base1(yr,i,"yr",1) * get_base1(z,i,"z",1)));
                current_statement_begin__ = 14;
                stan::math::assign(get_base1_lhs(X,i,6,"X",1), ((get_base1(yr,i,"yr",1) * get_base1(yr,i,"yr",1)) * get_base1(z,i,"z",1)));
            }
            current_statement_begin__ = 15;
            for (int i = 1; i <= 6; ++i) {
                current_statement_begin__ = 15;
                stan::math::assign(get_base1_lhs(zero_beta,i,"zero_beta",1), 0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += ((3 * (3 - 1)) / 2);
        num_params_r__ += 3;
        num_params_r__ += ((6 * (6 - 1)) / 2);
        num_params_r__ += 6;
        num_params_r__ += ((6 * (6 - 1)) / 2);
        num_params_r__ += 6;
        num_params_r__ += M * 3;
        num_params_r__ += M1 * 6;
        num_params_r__ += M2 * 6;
        num_params_r__ += 6;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~m4_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("LOmega")))
            throw std::runtime_error("variable LOmega missing");
        vals_r__ = context__.vals_r("LOmega");
        pos__ = 0U;
        context__.validate_dims("initialization", "LOmega", "matrix_d", context__.to_vec(3,3));
        matrix_d LOmega(3,3);
        for (int j2__ = 0U; j2__ < 3; ++j2__)
            for (int j1__ = 0U; j1__ < 3; ++j1__)
                LOmega(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(LOmega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable LOmega: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(3));
        vector_d tau(3);
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("LOmega1")))
            throw std::runtime_error("variable LOmega1 missing");
        vals_r__ = context__.vals_r("LOmega1");
        pos__ = 0U;
        context__.validate_dims("initialization", "LOmega1", "matrix_d", context__.to_vec(6,6));
        matrix_d LOmega1(6,6);
        for (int j2__ = 0U; j2__ < 6; ++j2__)
            for (int j1__ = 0U; j1__ < 6; ++j1__)
                LOmega1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(LOmega1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable LOmega1: ") + e.what());
        }

        if (!(context__.contains_r("tau1")))
            throw std::runtime_error("variable tau1 missing");
        vals_r__ = context__.vals_r("tau1");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau1", "vector_d", context__.to_vec(6));
        vector_d tau1(6);
        for (int j1__ = 0U; j1__ < 6; ++j1__)
            tau1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau1: ") + e.what());
        }

        if (!(context__.contains_r("LOmega2")))
            throw std::runtime_error("variable LOmega2 missing");
        vals_r__ = context__.vals_r("LOmega2");
        pos__ = 0U;
        context__.validate_dims("initialization", "LOmega2", "matrix_d", context__.to_vec(6,6));
        matrix_d LOmega2(6,6);
        for (int j2__ = 0U; j2__ < 6; ++j2__)
            for (int j1__ = 0U; j1__ < 6; ++j1__)
                LOmega2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(LOmega2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable LOmega2: ") + e.what());
        }

        if (!(context__.contains_r("tau2")))
            throw std::runtime_error("variable tau2 missing");
        vals_r__ = context__.vals_r("tau2");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau2", "vector_d", context__.to_vec(6));
        vector_d tau2(6);
        for (int j1__ = 0U; j1__ < 6; ++j1__)
            tau2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau2: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(M,3));
        matrix_d beta(M,3);
        for (int j2__ = 0U; j2__ < 3; ++j2__)
            for (int j1__ = 0U; j1__ < M; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("beta1")))
            throw std::runtime_error("variable beta1 missing");
        vals_r__ = context__.vals_r("beta1");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta1", "matrix_d", context__.to_vec(M1,6));
        matrix_d beta1(M1,6);
        for (int j2__ = 0U; j2__ < 6; ++j2__)
            for (int j1__ = 0U; j1__ < M1; ++j1__)
                beta1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta1: ") + e.what());
        }

        if (!(context__.contains_r("beta2")))
            throw std::runtime_error("variable beta2 missing");
        vals_r__ = context__.vals_r("beta2");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta2", "matrix_d", context__.to_vec(M2,6));
        matrix_d beta2(M2,6);
        for (int j2__ = 0U; j2__ < 6; ++j2__)
            for (int j1__ = 0U; j1__ < M2; ++j1__)
                beta2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta2: ") + e.what());
        }

        if (!(context__.contains_r("mean_beta")))
            throw std::runtime_error("variable mean_beta missing");
        vals_r__ = context__.vals_r("mean_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "mean_beta", "row_vector_d", context__.to_vec(6));
        row_vector_d mean_beta(6);
        for (int j1__ = 0U; j1__ < 6; ++j1__)
            mean_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(mean_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mean_beta: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("ysigma")))
            throw std::runtime_error("variable ysigma missing");
        vals_r__ = context__.vals_r("ysigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "ysigma", "double", context__.to_vec());
        double ysigma(0);
        ysigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ysigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ysigma: ") + e.what());
        }

        if (!(context__.contains_r("df")))
            throw std::runtime_error("variable df missing");
        vals_r__ = context__.vals_r("df");
        pos__ = 0U;
        context__.validate_dims("initialization", "df", "double", context__.to_vec());
        double df(0);
        df = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,df);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable df: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LOmega;
        (void) LOmega;   // dummy to suppress unused var warning
        if (jacobian__)
            LOmega = in__.cholesky_corr_constrain(3,lp__);
        else
            LOmega = in__.cholesky_corr_constrain(3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,3,lp__);
        else
            tau = in__.vector_lb_constrain(0,3);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LOmega1;
        (void) LOmega1;   // dummy to suppress unused var warning
        if (jacobian__)
            LOmega1 = in__.cholesky_corr_constrain(6,lp__);
        else
            LOmega1 = in__.cholesky_corr_constrain(6);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau1;
        (void) tau1;   // dummy to suppress unused var warning
        if (jacobian__)
            tau1 = in__.vector_lb_constrain(0,6,lp__);
        else
            tau1 = in__.vector_lb_constrain(0,6);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LOmega2;
        (void) LOmega2;   // dummy to suppress unused var warning
        if (jacobian__)
            LOmega2 = in__.cholesky_corr_constrain(6,lp__);
        else
            LOmega2 = in__.cholesky_corr_constrain(6);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau2;
        (void) tau2;   // dummy to suppress unused var warning
        if (jacobian__)
            tau2 = in__.vector_lb_constrain(0,6,lp__);
        else
            tau2 = in__.vector_lb_constrain(0,6);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta;
        (void) beta;   // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.matrix_constrain(M,3,lp__);
        else
            beta = in__.matrix_constrain(M,3);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta1;
        (void) beta1;   // dummy to suppress unused var warning
        if (jacobian__)
            beta1 = in__.matrix_constrain(M1,6,lp__);
        else
            beta1 = in__.matrix_constrain(M1,6);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta2;
        (void) beta2;   // dummy to suppress unused var warning
        if (jacobian__)
            beta2 = in__.matrix_constrain(M2,6,lp__);
        else
            beta2 = in__.matrix_constrain(M2,6);

        Eigen::Matrix<T__,1,Eigen::Dynamic>  mean_beta;
        (void) mean_beta;   // dummy to suppress unused var warning
        if (jacobian__)
            mean_beta = in__.row_vector_constrain(6,lp__);
        else
            mean_beta = in__.row_vector_constrain(6);

        T__ sigma;
        (void) sigma;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0);

        T__ ysigma;
        (void) ysigma;   // dummy to suppress unused var warning
        if (jacobian__)
            ysigma = in__.scalar_lb_constrain(0,lp__);
        else
            ysigma = in__.scalar_lb_constrain(0);

        T__ df;
        (void) df;   // dummy to suppress unused var warning
        if (jacobian__)
            df = in__.scalar_lb_constrain(0,lp__);
        else
            df = in__.scalar_lb_constrain(0);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  obs_mean(N);
                (void) obs_mean;   // dummy to suppress unused var warning
                stan::math::fill(obs_mean,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  obs_sigma(N);
                (void) obs_sigma;   // dummy to suppress unused var warning
                stan::math::fill(obs_sigma,DUMMY_VAR__);
                Eigen::Matrix<T__,1,Eigen::Dynamic>  x(6);
                (void) x;   // dummy to suppress unused var warning
                stan::math::fill(x,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LSigma_beta(3,3);
                (void) LSigma_beta;   // dummy to suppress unused var warning
                stan::math::fill(LSigma_beta,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LSigma_beta1(6,6);
                (void) LSigma_beta1;   // dummy to suppress unused var warning
                stan::math::fill(LSigma_beta1,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  LSigma_beta2(6,6);
                (void) LSigma_beta2;   // dummy to suppress unused var warning
                stan::math::fill(LSigma_beta2,DUMMY_VAR__);
                stan::math::initialize(obs_mean, DUMMY_VAR__);
                stan::math::initialize(obs_sigma, DUMMY_VAR__);
                stan::math::initialize(x, DUMMY_VAR__);
                stan::math::initialize(LSigma_beta, DUMMY_VAR__);
                stan::math::initialize(LSigma_beta1, DUMMY_VAR__);
                stan::math::initialize(LSigma_beta2, DUMMY_VAR__);
                current_statement_begin__ = 36;
                stan::math::assign(LSigma_beta, diag_pre_multiply(tau,LOmega));
                current_statement_begin__ = 37;
                stan::math::assign(LSigma_beta1, diag_pre_multiply(tau1,LOmega1));
                current_statement_begin__ = 38;
                stan::math::assign(LSigma_beta2, diag_pre_multiply(tau2,LOmega2));
                current_statement_begin__ = 39;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(LOmega, 2));
                current_statement_begin__ = 39;
                lp_accum__.add(lognormal_log<propto__>(tau, -(2.0), 1.0));
                current_statement_begin__ = 40;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(LOmega1, 2));
                current_statement_begin__ = 40;
                lp_accum__.add(lognormal_log<propto__>(tau1, -(2.0), 1.0));
                current_statement_begin__ = 41;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(LOmega2, 2));
                current_statement_begin__ = 41;
                lp_accum__.add(lognormal_log<propto__>(tau2, -(2.0), 1.0));
                current_statement_begin__ = 42;
                lp_accum__.add(normal_log<propto__>(mean_beta, 0, 5));
                current_statement_begin__ = 43;
                for (int i = 1; i <= M; ++i) {
                    current_statement_begin__ = 43;
                    lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(beta,i,"beta",1), head(zero_beta,3), LSigma_beta));
                }
                current_statement_begin__ = 44;
                for (int i = 1; i <= M1; ++i) {
                    current_statement_begin__ = 44;
                    lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(beta1,i,"beta1",1), zero_beta, LSigma_beta1));
                }
                current_statement_begin__ = 45;
                for (int i = 1; i <= M2; ++i) {
                    current_statement_begin__ = 45;
                    lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(beta2,i,"beta2",1), zero_beta, LSigma_beta2));
                }
                current_statement_begin__ = 47;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 48;
                    stan::math::assign(x, get_base1(X,i,"X",1));
                    current_statement_begin__ = 49;
                    stan::math::assign(get_base1_lhs(obs_mean,i,"obs_mean",1), (multiply(x,transpose(add(add(mean_beta,get_base1(beta2,get_base1(l2,i,"l2",1),"beta2",1)),get_base1(beta1,get_base1(l1,i,"l1",1),"beta1",1)))) + multiply(head(x,3),transpose(get_base1(beta,get_base1(pnro,i,"pnro",1),"beta",1)))));
                    current_statement_begin__ = 50;
                    stan::math::assign(get_base1_lhs(obs_sigma,i,"obs_sigma",1), sqrt((pow(ysigma,2) + (pow(sigma,2) / get_base1(count,i,"count",1)))));
                }
                current_statement_begin__ = 51;
                lp_accum__.add(normal_log<propto__>(sigma, 0, 2));
                current_statement_begin__ = 52;
                lp_accum__.add(normal_log<propto__>(ysigma, 0, 2));
                current_statement_begin__ = 53;
                lp_accum__.add(normal_log<propto__>(df, 0, 20));
                current_statement_begin__ = 54;
                lp_accum__.add(student_t_log<propto__>(lprice, (df + 1), obs_mean, obs_sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("LOmega");
        names__.push_back("tau");
        names__.push_back("LOmega1");
        names__.push_back("tau1");
        names__.push_back("LOmega2");
        names__.push_back("tau2");
        names__.push_back("beta");
        names__.push_back("beta1");
        names__.push_back("beta2");
        names__.push_back("mean_beta");
        names__.push_back("sigma");
        names__.push_back("ysigma");
        names__.push_back("df");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M1);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M2);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "m4_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d LOmega = in__.cholesky_corr_constrain(3);
        vector_d tau = in__.vector_lb_constrain(0,3);
        matrix_d LOmega1 = in__.cholesky_corr_constrain(6);
        vector_d tau1 = in__.vector_lb_constrain(0,6);
        matrix_d LOmega2 = in__.cholesky_corr_constrain(6);
        vector_d tau2 = in__.vector_lb_constrain(0,6);
        matrix_d beta = in__.matrix_constrain(M,3);
        matrix_d beta1 = in__.matrix_constrain(M1,6);
        matrix_d beta2 = in__.matrix_constrain(M2,6);
        row_vector_d mean_beta = in__.row_vector_constrain(6);
        double sigma = in__.scalar_lb_constrain(0);
        double ysigma = in__.scalar_lb_constrain(0);
        double df = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
                vars__.push_back(LOmega(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 6; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
                vars__.push_back(LOmega1(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
            vars__.push_back(tau1[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 6; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
                vars__.push_back(LOmega2(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
            vars__.push_back(tau2[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < 6; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M1; ++k_0__) {
                vars__.push_back(beta1(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < 6; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M2; ++k_0__) {
                vars__.push_back(beta2(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
            vars__.push_back(mean_beta[k_0__]);
        }
        vars__.push_back(sigma);
        vars__.push_back(ysigma);
        vars__.push_back(df);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "m4_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "LOmega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "LOmega1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "LOmega2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ysigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "df";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= ((3 * (3 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LOmega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((6 * (6 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LOmega1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((6 * (6 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LOmega2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 6; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ysigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "df";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef m4_model_namespace::m4_model stan_model;

